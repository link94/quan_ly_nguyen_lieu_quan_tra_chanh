// Generated by view binder compiler. Do not edit!
package com.example.second.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.second.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogLoginOptionBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText dialogCodeEdt;

  @NonNull
  public final Button dialogEmployeeBtn;

  @NonNull
  public final Button dialogManagerBtn;

  @NonNull
  public final Button dialogOkBtn;

  @NonNull
  public final TextView dialogOptionTv;

  private DialogLoginOptionBinding(@NonNull LinearLayout rootView, @NonNull EditText dialogCodeEdt,
      @NonNull Button dialogEmployeeBtn, @NonNull Button dialogManagerBtn,
      @NonNull Button dialogOkBtn, @NonNull TextView dialogOptionTv) {
    this.rootView = rootView;
    this.dialogCodeEdt = dialogCodeEdt;
    this.dialogEmployeeBtn = dialogEmployeeBtn;
    this.dialogManagerBtn = dialogManagerBtn;
    this.dialogOkBtn = dialogOkBtn;
    this.dialogOptionTv = dialogOptionTv;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogLoginOptionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogLoginOptionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_login_option, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogLoginOptionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.dialog_code_edt;
      EditText dialogCodeEdt = ViewBindings.findChildViewById(rootView, id);
      if (dialogCodeEdt == null) {
        break missingId;
      }

      id = R.id.dialog_employee_btn;
      Button dialogEmployeeBtn = ViewBindings.findChildViewById(rootView, id);
      if (dialogEmployeeBtn == null) {
        break missingId;
      }

      id = R.id.dialog_manager_btn;
      Button dialogManagerBtn = ViewBindings.findChildViewById(rootView, id);
      if (dialogManagerBtn == null) {
        break missingId;
      }

      id = R.id.dialog_ok_btn;
      Button dialogOkBtn = ViewBindings.findChildViewById(rootView, id);
      if (dialogOkBtn == null) {
        break missingId;
      }

      id = R.id.dialog_option_tv;
      TextView dialogOptionTv = ViewBindings.findChildViewById(rootView, id);
      if (dialogOptionTv == null) {
        break missingId;
      }

      return new DialogLoginOptionBinding((LinearLayout) rootView, dialogCodeEdt, dialogEmployeeBtn,
          dialogManagerBtn, dialogOkBtn, dialogOptionTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
